name: nx30pro 020 builder

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 5'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: .config
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: self-hosted
    container:
      image: wang4649/wang-ubuntu:latest
      options: --user wang
    env:
      HOME: /home/wang
    steps:
      # ------------------------------ 原有步骤保持不变 ------------------------------
      - name: 检出仓库
        uses: actions/checkout@main
      
      - name: 安装依赖
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update && \
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          ack \
          antlr3 \
          asciidoc \
          autoconf \
          automake \
          autopoint \
          binutils \
          bison \
          build-essential \
          bzip2 \
          ccache \
          clang \
          cmake \
          cpio \
          curl \
          device-tree-compiler \
          flex \
          gawk \
          gcc-multilib \
          g++-multilib \
          gettext \
          genisoimage \
          git \
          gperf \
          haveged \
          help2man \
          intltool \
          libc6-dev-i386 \
          libelf-dev \
          libfuse-dev \
          libglib2.0-dev \
          libgmp3-dev \
          libltdl-dev \
          libmpc-dev \
          libmpfr-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libpython3-dev \
          libreadline-dev \
          libssl-dev \
          libtool \
          llvm \
          lrzsz \
          msmtp \
          ninja-build \
          p7zip \
          p7zip-full \
          patch \
          pkgconf \
          python3 \
          python3-pyelftools \
          python3-setuptools \
          qemu-utils \
          rsync \
          scons \
          squashfs-tools \
          subversion \
          swig \
          texinfo \
          uglifyjs \
          upx-ucl \
          unzip \
          vim \
          wget \
          xmlto \
          xxd \
          zlib1g-dev
      
      - name: 下载源码
        run: |
          git clone $REPO_URL -b $REPO_BRANCH /home/wang/openwrt
      
      - name: 更新FEEDS
        run: |
          cd /home/wang/openwrt && ./scripts/feeds update -a
      
      - name: 安装FEEDS
        run: cd /home/wang/openwrt && ./scripts/feeds install -a
      
      - name: 下载配置
        run: |
          [ -e files ] && mv files /home/wang/openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE /home/wang/openwrt/.config
          cd /home/wang/openwrt
          make defconfig
      
      - name: 预下载DL
        run: |
          cd /home/wang/openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        run: |
          cd /home/wang/openwrt
          make -j8 || make -j1 V=s
      # ------------------------------ 新增步骤：动态定位并打包固件 ------------------------------
      - name: 读取 .config 配置（提取 TARGET 和 SUBTARGET）
        id: config_parse
        run: |
          # 提取 TARGET（如 x86/64）
          TARGET=$(grep '^TARGET=' /home/wang/openwrt/.config | awk -F'"' '{print $2}' | cut -d'/' -f1-2)
          # 提取 SUBTARGET（如 generic）
          SUBTARGET=$(grep '^SUBTARGET=' /home/wang/openwrt/.config | awk -F'"' '{print $2}')
          
          # 验证是否提取成功（避免空值）
          if [ -z "$TARGET" ] || [ -z "$SUBTARGET" ]; then
            echo "错误：无法从 .config 中提取 TARGET 或 SUBTARGET！"
            exit 1
          fi
          
          # 输出到 GitHub Actions 环境变量（供后续步骤使用）
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "subtarget=$SUBTARGET" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: 动态定位固件目录并验证
        run: |
          # 从环境变量获取 TARGET 和 SUBTARGET（来自上一步）
          TARGET="${{ steps.config_parse.outputs.target }}"
          SUBTARGET="${{ steps.config_parse.outputs.subtarget }}"
          
          # 固件目录路径（OpenWRT 标准路径：bin/targets/<TARGET>/<SUBTARGET>）
          FIRMWARE_DIR="/home/wang/openwrt/bin/targets/$TARGET/$SUBTARGET"
          
          # 检查目录是否存在（避免因编译失败导致路径无效）
          if [ ! -d "$FIRMWARE_DIR" ]; then
            echo "错误：固件目录不存在！路径：$FIRMWARE_DIR"
            exit 1
          fi
          
          echo "固件目录定位成功：$FIRMWARE_DIR"
      
      - name: 打包固件目录（日期+平台命名）
        run: |
          # 从环境变量获取 TARGET 和 SUBTARGET
          TARGET="${{ steps.config_parse.outputs.target }}"
          SUBTARGET="${{ steps.config_parse.outputs.subtarget }}"
          
          # 生成日期时间（格式 YYYYMMDD-HHMMSS）
          CURRENT_DATETIME=$(date +%Y%m%d-%H%M%S)
          
          # 输出文件路径（包含平台信息，避免冲突）
          OUTPUT_FILE="/home/wang/openwrt/firmware_${TARGET}_${SUBTARGET}_${CURRENT_DATETIME}.tar.gz"
          
          # 打包命令（-C 切换到 bin 目录，避免冗余路径）
          echo "正在打包固件目录：$FIRMWARE_DIR → $OUTPUT_FILE"
          tar -czvf "$OUTPUT_FILE" -C /home/wang/openwrt/bin targets/$TARGET/$SUBTARGET/ || { echo "错误：打包失败！"; exit 1; }
          
          # 验证打包文件是否存在
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "错误：打包后文件未生成！路径：$OUTPUT_FILE"
            exit 1
          fi
          
          echo "打包成功，文件路径：$OUTPUT_FILE"
      
      - name: 上传固件到 WebDAV 服务器
        run: |
          # 从环境变量获取 TARGET 和 SUBTARGET
          TARGET="${{ steps.config_parse.outputs.target }}"
          SUBTARGET="${{ steps.config_parse.outputs.subtarget }}"
          
          # 生成日期时间（格式 YYYYMMDD-HHMMSS）
          CURRENT_DATETIME=$(date +%Y%m%d-%H%M%S)
          
          # 输出文件路径（与打包步骤一致）
          OUTPUT_FILE="/home/wang/openwrt/firmware_${TARGET}_${SUBTARGET}_${CURRENT_DATETIME}.tar.gz"
          
          # WebDAV 配置
          WEBDAV_URL="http://39.108.174.7:8081/Downloads"
          WEBDAV_USER="admin"
          WEBDAV_PASS="admin1234"
          
          # 检查文件是否存在
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "错误：待上传文件不存在！路径：$OUTPUT_FILE"
            exit 1
          fi
          
          # 使用 curl 上传（-f 强制失败，-v 显示详细日志）
          echo "正在上传到 WebDAV：$WEBDAV_URL"
          curl -f -v -u "${WEBDAV_USER}:${WEBDAV_PASS}" \
            -T "$OUTPUT_FILE" \
            "$WEBDAV_URL" || { echo "错误：上传失败！"; exit 1; }
          
          echo "上传成功！文件已保存至 WebDAV：${WEBDAV_URL}/firmware_${TARGET}_${SUBTARGET}_${CURRENT_DATETIME}.tar.gz"