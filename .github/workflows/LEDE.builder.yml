name: OpenWrt-lede Auto-Config Builder

on:
  workflow_dispatch:
    inputs:
      target_device:
        description: 'Target device model (e.g. nx30pro)'
        required: true
        default: 'nx30pro'
  repository_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_DIR: config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load device-specific config
      run: |
        CONFIG_SOURCE="$GITHUB_WORKSPACE/${{ env.CONFIG_DIR }}/${{ inputs.target_device }}/.config"
        CONFIG_DESTINATION="/workdir/openwrt/.config"
        [ -f "$CONFIG_SOURCE" ] && cp -v "$CONFIG_SOURCE" "$CONFIG_DESTINATION" || (echo "❌ Config not found"; exit 1)

    - name: Update default feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    # --------------- 新增 iStore 集成步骤 ---------------
    - name: Add iStore feed
      run: |
        cd openwrt
        echo >> feeds.conf.default
        echo 'src-git istore https://github.com/linkease/istore;main' >> feeds.conf.default

    - name: Update iStore feed
      run: |
        cd openwrt
        ./scripts/feeds update istore

    - name: Install luci-app-store
      run: |
        cd openwrt
        ./scripts/feeds install -d y -p istore luci-app-store
    # ------------------------------------------------

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DEVICE_NAME=${{ inputs.target_device }}" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: Upload firmware
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success'
      with:
        name: OpenWrt_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin/targets/*/*

    - name: Create release
      uses: softprops/action-gh-release@v1
      if: success() && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        files: openwrt/bin/targets/*/*/*
