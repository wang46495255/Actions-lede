name: OpenWrt Build & Package Pipeline
on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'OpenWrt分支'
        required: false
        default: 'master'
      target_device:
        description: '目标设备 (格式: 型号)'
        required: false
        default: 'na30pro'
  repository_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: ${{ github.event.inputs.target_branch }}
  TARGET_DEVICE: ${{ github.event.inputs.target_device }}
  TZ: Asia/Shanghai
  UPLOAD_RELEASE: true
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: 🔄 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🛠️ 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq full-upgrade -y
        sudo -E apt-get -qq install -y --no-install-recommends \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib \
          g++-multilib gettext genisoimage git gperf haveged help2man intltool \
          libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
          libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip \
          p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools \
          qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs \
          upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 📦 缓存依赖
      uses: actions/cache@v3
      with:
        path: /opt/hostedtoolcache
        key: ${{ runner.os }}-dependencies-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-dependencies-

    - name: 📡 更新软件源
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: ⚙️ 替换配置文件
      run: |
        cd openwrt
        if [ ! -f ../config/${TARGET_DEVICE}/.config ]; then
          echo "错误：未找到设备配置文件 config/${TARGET_DEVICE}/.config"
          exit 1
        fi
        cp ../config/${TARGET_DEVICE}/.config .config
        make defconfig

    - name: 📦 添加iStore软件源
      run: |
        cd openwrt
        echo "src-git istore https://github.com/linkease/istore;main" >> feeds.conf.default

    - name: 🔄 更新iStore源
      run: |
        cd openwrt
        ./scripts/feeds update istore

    - name: 📥 安装iStore组件
      run: |
        cd openwrt
        ./scripts/feeds install -d y -p istore luci-app-store

    - name: 📥 下载依赖包
      run: |
        cd openwrt
        make download -j$(nproc)
        find dl -size -1024c -delete

    - name: 🏗️ 开始编译
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
        DEVICE=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        DATE=$(date +"%Y%m%d")
        SIZE=$(du -sh bin/targets/*/*/*.img.gz | awk '{print $1}')
        echo "device=$DEVICE" >> $GITHUB_OUTPUT
        echo "date=$DATE" >> $GITHUB_OUTPUT
        echo "size=$SIZE" >> $GITHUB_OUTPUT

    - name: 📦 打包固件
      run: |
        cd openwrt/bin
        PACKAGE_NAME="openwrt-${{ steps.compile.outputs.device }}-${{ steps.compile.outputs.date }}.tar.gz"
        tar -czvf $PACKAGE_NAME targets/*
        echo "PACKAGE_PATH=$PWD/$PACKAGE_NAME" >> $GITHUB_ENV

    - name: 📤 发布固件
      uses: softprops/action-gh-release@v1
      if: always()
      with:
        tag_name: ${{ steps.compile.outputs.date }}-${{ steps.compile.outputs.device }}
        body: |
          **编译信息**
          - 日期: ${{ steps.compile.outputs.date }}
          - 设备: ${{ steps.compile.outputs.device }}
          - 固件大小: ${{ steps.compile.outputs.size }}
        files: ${{ env.PACKAGE_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 🧹 清理环境
      run: |
        sudo rm -rf openwrt
        sudo apt-get autoremove -y
        sudo apt-get clean

    - name: 🚀 发送通知
      uses: actions-simple/slack-notify-action@v2
      if: always()
      with:
        status: ${{ job.status }}
        fields: repo, job, ref, workflow, actor, conclusion
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: 🔄 清理旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}